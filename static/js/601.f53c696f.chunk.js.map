{"version":3,"file":"static/js/601.f53c696f.chunk.js","mappings":"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","sources":["webpack://phonebook-testtask/./src/components/Button/Button.module.css?ce6f","components/Button/Button.jsx","webpack://phonebook-testtask/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","webpack://phonebook-testtask/./src/pages/ContactFormPage/ContactFormPage.module.css?f05f","webpack://phonebook-testtask/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","pages/ContactFormPage/ContactFormPage.jsx","redux/selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__RBtNK\"};","import React from \"react\";\nimport s from \"./Button.module.css\";\nconst Button = ({ type, name }) => {\n  return (\n    <button type={type} className={s.btn}>\n      {name}\n    </button>\n  );\n};\n\nexport default Button;\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\"};","import React from \"react\";\nimport s from \"./Section.module.css\";\nconst Section = ({ children }) => {\n  return <div className={s.section}>{children}</div>;\n};\n\nexport default Section;\n","// extracted by mini-css-extract-plugin\nexport default {\"div\":\"ContactFormPage_div__herWl\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import React, { useState } from \"react\";\nimport s from \"./ContactForm.module.css\";\nimport { addContact } from \"../../redux/operations\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getContactValueState } from \"../../redux/selectors\";\nimport Button from \"../Button/Button\";\nimport { Notify } from \"notiflix/build/notiflix-notify-aio\";\n\nconst ContactForm = () => {\n  const [name, setName] = useState(\"\");\n  const [last_name, setLast_name] = useState(\"\");\n  const [adress, setAdress] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone_number, setPhone_number] = useState(\"\");\n\n  const dispatch = useDispatch();\n  const { items } = useSelector(getContactValueState);\n\n  const handlerChange = (e) => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"last_name\":\n        setLast_name(value);\n        break;\n      case \"adress\":\n        setAdress(value);\n        break;\n      case \"city\":\n        setCity(value);\n        break;\n      case \"country\":\n        setCountry(value);\n        break;\n      case \"email\":\n        setEmail(value);\n        break;\n      case \"phone_number\":\n        setPhone_number(value);\n        break;\n      default:\n    }\n  };\n  const validateContact = (email) => {\n    const normalizedEmail = email.toLowerCase();\n    if (items.find(({ email }) => email.toLowerCase() === normalizedEmail)) {\n      alert(`${email} is already in contacts`);\n    } else {\n      reset();\n      return (\n        dispatch(\n          addContact({\n            name,\n            last_name,\n            adress,\n            city,\n            country,\n            email,\n            phone_number,\n          })\n        ),\n        Notify.success(\"Contact added\")\n      );\n    }\n  };\n  const handlerSumbit = (e) => {\n    e.preventDefault();\n    if (name.trim() === \"\" && email.trim() === \"\") {\n      Notify.failure(`Fill in the fields before adding`);\n      return;\n    }\n    return validateContact(email);\n  };\n  const reset = () => {\n    setName(\"\");\n    setLast_name(\"\");\n    setAdress(\"\");\n    setCity(\"\");\n    setCountry(\"\");\n    setEmail(\"\");\n    setPhone_number(\"\");\n  };\n  return (\n    <>\n      <form className={s.form} onSubmit={handlerSumbit}>\n        <label className={s.label} htmlFor=\"name\">\n          Name\n        </label>\n        <input\n          onChange={handlerChange}\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          required\n          id=\"name\"\n          value={name}\n          placeholder=\"Name\"\n        />\n        <label className={s.label} htmlFor=\"last_name\">\n          Last Name\n        </label>\n        <input\n          onChange={handlerChange}\n          className={s.input}\n          type=\"text\"\n          name=\"last_name\"\n          required\n          id=\"last_name\"\n          value={last_name}\n          placeholder=\"Last Name\"\n        />\n\n        <label className={s.label} htmlFor=\"adress\">\n          Adress\n        </label>\n        <input\n          onChange={handlerChange}\n          className={s.input}\n          type=\"text\"\n          name=\"adress\"\n          required\n          id=\"adress\"\n          value={adress}\n          placeholder=\"Street\"\n        />\n\n        <label className={s.label} htmlFor=\"city\">\n          City\n        </label>\n        <input\n          onChange={handlerChange}\n          className={s.input}\n          type=\"text\"\n          name=\"city\"\n          required\n          id=\"city\"\n          value={city}\n          placeholder=\"City\"\n        />\n\n        <label className={s.label} htmlFor=\"country\">\n          Country\n        </label>\n        <input\n          onChange={handlerChange}\n          className={s.input}\n          type=\"text\"\n          name=\"country\"\n          required\n          id=\"country\"\n          value={country}\n          placeholder=\"Country\"\n        />\n\n        <label className={s.label} htmlFor=\"email\">\n          Email\n        </label>\n        <input\n          onChange={handlerChange}\n          className={s.input}\n          type=\"email\"\n          name=\"email\"\n          required\n          id=\"email\"\n          value={email}\n          placeholder=\"myEmail@xxx.xxx\"\n        />\n\n        <label className={s.label} htmlFor=\"phone_number\">\n          Phone number\n        </label>\n        <input\n          onChange={handlerChange}\n          className={s.input}\n          type=\"phone\"\n          name=\"phone_number\"\n          required\n          id=\"phone_number\"\n          value={phone_number}\n          placeholder=\"XXX-XXX-XX-XX\"\n        />\n        <span className={s.button}>\n          <Button type=\"submit\" name=\"Submit\" />\n        </span>\n      </form>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import React from \"react\";\nimport s from \"./ContactFormPage.module.css\";\nimport ContactForm from \"../../components/ContactForm/ContactForm\";\nimport Section from \"../../components/Section/Section\";\nconst ContactFormPage = () => {\n  return (\n    <Section>\n      <div className={s.div}>\n        <h2 className={s.h2}>Add new contact</h2>\n        <ContactForm />\n      </div>\n    </Section>\n  );\n};\n\nexport default ContactFormPage;\n","const getContactValueState = (state) => state.contact;\nconst getModalValueState = (state) => state.modal;\nexport { getContactValueState, getModalValueState };\n"],"names":["type","name","className","s","children","useState","setName","last_name","setLast_name","adress","setAdress","city","setCity","country","setCountry","email","setEmail","phone_number","setPhone_number","dispatch","useDispatch","items","useSelector","getContactValueState","handlerChange","e","currentTarget","value","reset","onSubmit","preventDefault","trim","normalizedEmail","toLowerCase","find","addContact","Notify","alert","validateContact","htmlFor","onChange","required","id","placeholder","Button","Section","state","contact","getModalValueState","modal"],"sourceRoot":""}