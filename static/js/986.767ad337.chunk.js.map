{"version":3,"file":"static/js/986.767ad337.chunk.js","mappings":"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","sources":["webpack://phonebook-testtask/./src/components/Button/Button.module.css?ce6f","components/Button/Button.jsx","webpack://phonebook-testtask/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","webpack://phonebook-testtask/./src/pages/HomePage/HomePage.module.css?5baa","webpack://phonebook-testtask/./src/components/ContactList/ContactList.module.css?1ce0","webpack://phonebook-testtask/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.jsx","webpack://phonebook-testtask/./src/components/UpdateContact/UpdateContact.module.css?63a0","components/UpdateContact/UpdateContact.jsx","components/ContactList/ContactList.jsx","pages/HomePage/HomePage.jsx","redux/selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__RBtNK\"};","import React from \"react\";\nimport s from \"./Button.module.css\";\nconst Button = ({ type, name }) => {\n  return (\n    <button type={type} className={s.btn}>\n      {name}\n    </button>\n  );\n};\n\nexport default Button;\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\"};","import React from \"react\";\nimport s from \"./Section.module.css\";\nconst Section = ({ children }) => {\n  return <div className={s.section}>{children}</div>;\n};\n\nexport default Section;\n","// extracted by mini-css-extract-plugin\nexport default {\"div\":\"HomePage_div__ivH-n\"};","// extracted by mini-css-extract-plugin\nexport default {\"div\":\"ContactList_div__3QzFq\",\"table\":\"ContactList_table__GN5S1\",\"thead\":\"ContactList_thead__f5GyZ\",\"btnDelete\":\"ContactList_btnDelete__Eeo9v\",\"btnEdit\":\"ContactList_btnEdit__cwpcz\"};","// extracted by mini-css-extract-plugin\nexport default {\"modalClosed\":\"Modal_modalClosed__Q1sG2\",\"modalActive\":\"Modal_modalActive__rXIij\",\"modal__content\":\"Modal_modal__content__VSCXP\",\"modal\":\"Modal_modal__DJDMv\",\"active\":\"Modal_active__-p53x\"};","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toggleModal } from \"../../redux/ModalSlice\";\nimport { getModalValueState } from \"../../redux/selectors\";\nimport s from \"./Modal.module.css\";\n\nconst Modal = ({ children }) => {\n  const { modalActive } = useSelector(getModalValueState);\n\n  const dispatch = useDispatch();\n  return (\n    <div\n      className={modalActive ? s.modalActive : s.modalClosed}\n      onClick={() => {\n        dispatch(toggleModal());\n      }}\n    >\n      <div className={s.modal__content} onClick={(e) => e.stopPropagation()}>\n        {children}\n      </div>\n    </div>\n  );\n};\nexport default Modal;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"UpdateContact_form__8zfeQ\",\"label\":\"UpdateContact_label__tkkrm\",\"input\":\"UpdateContact_input__xZivI\",\"button\":\"UpdateContact_button__Do07V\"};","import React, { useState } from \"react\";\nimport s from \"./UpdateContact.module.css\";\nimport Button from \"../Button/Button\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getContactValueState } from \"../../redux/selectors\";\nimport { updateContact } from \"../../redux/operations\";\nimport { toggleModal } from \"../../redux/ModalSlice\";\nimport { Notify } from \"notiflix/build/notiflix-notify-aio\";\n\nconst UpdateContact = ({ contactId }) => {\n  const dispatch = useDispatch();\n  const { items } = useSelector(getContactValueState);\n\n  const { name, last_name, adress, city, country, email, phone_number } =\n    items.find(({ id }) => id === contactId);\n\n  const [editName, setEditName] = useState(name);\n  const [editLast_name, setEditLast_name] = useState(last_name);\n  const [editAdress, setEditAdress] = useState(adress);\n  const [editCity, setEditCity] = useState(city);\n  const [editCountry, setEditCountry] = useState(country);\n  const [editEmail, setEditEmail] = useState(email);\n  const [editPhone_number, setEditPhone_number] = useState(phone_number);\n\n  const handlerChange = (e) => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case \"name\":\n        setEditName(value);\n        break;\n      case \"last_name\":\n        setEditLast_name(value);\n        break;\n      case \"adress\":\n        setEditAdress(value);\n        break;\n      case \"city\":\n        setEditCity(value);\n        break;\n      case \"country\":\n        setEditCountry(value);\n        break;\n      case \"email\":\n        setEditEmail(value);\n        break;\n      case \"phone_number\":\n        setEditPhone_number(value);\n        break;\n      default:\n    }\n  };\n\n  const handlerSumbit = (e) => {\n    e.preventDefault();\n    if (name.trim() === \"\") {\n      Notify.failure(`Fill in the fields before adding`);\n      return;\n    }\n    return (\n      dispatch(\n        updateContact({\n          contactId,\n          name: editName,\n          last_name: editLast_name,\n          adress: editAdress,\n          city: editCity,\n          country: editCountry,\n          email: editEmail,\n          phone_number: editPhone_number,\n        })\n      ),\n      dispatch(toggleModal()),\n      Notify.success(\"contact updated\")\n    );\n  };\n  return (\n    <>\n      <h2>Update contact</h2>\n      <form className={s.form} onSubmit={handlerSumbit}>\n        <label className={s.label} htmlFor=\"name\">\n          Name\n        </label>\n        <input\n          onChange={handlerChange}\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          required\n          id=\"name\"\n          value={editName}\n          placeholder=\"Name\"\n        />\n        <label className={s.label} htmlFor=\"last_name\">\n          Last Name\n        </label>\n        <input\n          onChange={handlerChange}\n          className={s.input}\n          type=\"text\"\n          name=\"last_name\"\n          required\n          id=\"last_name\"\n          value={editLast_name}\n          placeholder=\"Last Name\"\n        />\n\n        <label className={s.label} htmlFor=\"adress\">\n          Adress\n        </label>\n        <input\n          onChange={handlerChange}\n          className={s.input}\n          type=\"text\"\n          name=\"adress\"\n          required\n          id=\"adress\"\n          value={editAdress}\n          placeholder=\"Street\"\n        />\n\n        <label className={s.label} htmlFor=\"city\">\n          City\n        </label>\n        <input\n          onChange={handlerChange}\n          className={s.input}\n          type=\"text\"\n          name=\"city\"\n          required\n          id=\"city\"\n          value={editCity}\n          placeholder=\"City\"\n        />\n\n        <label className={s.label} htmlFor=\"country\">\n          Country\n        </label>\n        <input\n          onChange={handlerChange}\n          className={s.input}\n          type=\"text\"\n          name=\"country\"\n          required\n          id=\"country\"\n          value={editCountry}\n          placeholder=\"Country\"\n        />\n\n        <label className={s.label} htmlFor=\"email\">\n          Email\n        </label>\n        <input\n          onChange={handlerChange}\n          className={s.input}\n          type=\"email\"\n          name=\"email\"\n          required\n          id=\"email\"\n          value={editEmail}\n          placeholder=\"myEmail@xxx.xxx\"\n        />\n\n        <label className={s.label} htmlFor=\"phone_number\">\n          Phone number\n        </label>\n        <input\n          onChange={handlerChange}\n          className={s.input}\n          type=\"phone\"\n          name=\"phone_number\"\n          required\n          id=\"phone_number\"\n          value={editPhone_number}\n          placeholder=\"XXX-XXX-XX-XX\"\n        />\n        <span className={s.button}>\n          <Button type=\"submit\" name=\"Edit\" />\n        </span>\n      </form>\n    </>\n  );\n};\n\nexport default UpdateContact;\n","import React, { useEffect, useState } from \"react\";\nimport s from \"./ContactList.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getContactValueState,\n  getModalValueState,\n} from \"../../redux/selectors\";\nimport { fetchContacts, deleteContact } from \"../../redux/operations\";\nimport Modal from \"../Modal/Modal\";\nimport { toggleModal } from \"../../redux/ModalSlice\";\nimport UpdateContact from \"../UpdateContact/UpdateContact\";\nimport { Notify } from \"notiflix/build/notiflix-notify-aio\";\n\nconst ContactList = () => {\n  const { modalActive } = useSelector(getModalValueState);\n  const { items, isLoading, error } = useSelector(getContactValueState);\n  const [idUpdate, setIdUpdate] = useState(null);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handlerDeleteContact = (contactId) => {\n    return (\n      dispatch(deleteContact(contactId)), Notify.success(\"Contact deleted\")\n    );\n  };\n\n  return (\n    <>\n      <div className={s.div}>\n        <div>\n          <table className={s.table}>\n            <thead className={s.thead}>\n              <tr>\n                <th>Name</th>\n                <th>Last Name</th>\n                <th>Adress</th>\n                <th>City</th>\n                <th>Country</th>\n                <th>Email</th>\n                <th>Number</th>\n                <th>Edit</th>\n                <th>Delete</th>\n              </tr>\n            </thead>\n            <tbody>\n              {items &&\n                items.map(\n                  ({\n                    id,\n                    name,\n                    last_name,\n                    adress,\n                    city,\n                    country,\n                    email,\n                    phone_number,\n                  }) => {\n                    return (\n                      <tr key={id}>\n                        <td>{name}</td>\n                        <td>{last_name}</td>\n                        <td>{adress}</td>\n                        <td>{city}</td>\n                        <td>{country}</td>\n                        <td>{email}</td>\n                        <td>{phone_number}</td>\n                        <td>\n                          <button\n                            type=\"button\"\n                            className={s.btnEdit}\n                            onClick={() => {\n                              dispatch(toggleModal());\n                              setIdUpdate(id);\n                            }}\n                          >\n                            Edit\n                          </button>\n                        </td>\n                        <td>\n                          <button\n                            type=\"button\"\n                            className={s.btnDelete}\n                            onClick={() => handlerDeleteContact(id)}\n                          >\n                            Delete\n                          </button>\n                        </td>\n                      </tr>\n                    );\n                  }\n                )}\n            </tbody>\n          </table>\n          {isLoading && <p>Loading tasks...</p>}\n          {error && <p>{error}</p>}\n          {modalActive && (\n            <Modal>\n              <UpdateContact contactId={idUpdate} />\n            </Modal>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ContactList;\n","import React from \"react\";\nimport s from \"./HomePage.module.css\";\nimport ContactList from \"../../components/ContactList/ContactList\";\nimport Section from \"../../components/Section/Section\";\nimport Button from \"../../components/Button/Button\";\nconst Home = () => {\n  return (\n    <>\n      <Section>\n        <div className={s.div}>\n          <h2>Contacts</h2>\n          <a href=\"/add\">\n            <Button type=\"button\" name=\"Add contact\" />\n          </a>\n        </div>\n        <ContactList />\n      </Section>\n    </>\n  );\n};\n\nexport default Home;\n","const getContactValueState = (state) => state.contact;\nconst getModalValueState = (state) => state.modal;\nexport { getContactValueState, getModalValueState };\n"],"names":["type","name","className","s","children","modalActive","useSelector","getModalValueState","dispatch","useDispatch","onClick","toggleModal","e","stopPropagation","contactId","getContactValueState","items","find","id","last_name","adress","city","country","email","phone_number","useState","editName","setEditName","editLast_name","setEditLast_name","editAdress","setEditAdress","editCity","setEditCity","editCountry","setEditCountry","editEmail","setEditEmail","editPhone_number","setEditPhone_number","handlerChange","currentTarget","value","onSubmit","preventDefault","trim","updateContact","Notify","htmlFor","onChange","required","placeholder","Button","isLoading","error","idUpdate","setIdUpdate","useEffect","fetchContacts","map","deleteContact","Section","href","state","contact","modal"],"sourceRoot":""}